% HiQLab
% Copyright (c): Regents of the University of California

$ #include "metisstubs.h"

@ Metis_ND.m ------------------------------------------------------------
function [perm,iperm] = Metis_ND(xadj, adj, prout)
% [perm, iperm] = Metis_ND(xadj, adj, prout)
% Compute Multilevel Nested Dissection based reordering using METIS
% Inputs:
%   -xadj   Adjacency offset of each node
%   -adj    Adjacency of each node
%
% Optional Inputs:
%   -prout    Reordering routine
%             0: Node based(Default)
%             1: Edge based
%             
nv   = length(xadj)-1;
nv1  = nv + 1;
ne   = length(adj)/2;
ne2  = ne*2;

% -- Select partitioning routine
if nargin < 3
    prout = 0;  %
end

% -- Select options
if prout == 0
  options = [0, 3, 1, 2, 0, 1, 0, 1]';
elseif prout == 1
  options = [0, 3, 1, 1, 0, 0, 0, 0]';
end


# metis_ND(int prout, int[nv1] xadj, int[ne2] adj, 
#          output int[nv] perm, output int[nv] iperm,
#           int[8] options, int nv, int ne);

@ Metis_PartGraph.m ------------------------------------------------------------
function [part, edgecut] = Metis_PartGraph(nparts, xadj, adj, prout, wgtflag, vwgt, adjwgt)
% [part, edgecut] = Metis_PartGraph(nparts, xadj, adj, prout,
%                                       wgtflag, vwgt, adjwgt)
% Compute K-way partition using METIS
% Inputs:
%   -nparts   Number of partions
%   -xadj     Adjacency offset of each node
%   -adj      Adjacency of each node
%
% Optional Inputs: 
%   -prout    Partitioning routine
%             0: Recursive bisection(Default)
%             1: K-way
%   -wgtflag  Constraint algorithm
%             0: No Weights(vwgt and adjwgt are NULL)
%             1: Weights on the edge only(vwgt is NULL)
%             2: Weights on the vertices only(adjwgt is NULL)
%             3: Weights on both vertices and edges
%   -vwgt     Vertex weights
%   -adjwgt   Edge weigthts
%  
nv    = length(xadj)-1;
ne    = length(adj)/2;
ncon  = 0;
nv1   = nv + 1;
ne2   = ne*2;
nvwgt = 0;
nadjwgt=0;

% -- Select partitioning routine
if nargin < 4
    prout = 1;  % K-way
end;

% -- Select constraint algorithm to use
if nargin < 5
    wgtflag = 0; 
end

if wgtflag == 0
    vwgt   = 0;
    adjwgt = 0;
elseif wgtflag == 1
    adjwgt = vwgt;
    vwgt   = 0;
    nadjwgt= ne*2;
elseif wgtflag == 2
    adjwgt = 0;
    nvwgt= length(vwgt);
    ncon   = nvwgt/nv;
else % wgtflag == 3
    nvwgt  = length(vwgt);
    ncon   = nvwgt/nv;
    nadjwgt= ne*2;
end

% -- Select options
options= [0, 3, 1, 1, 0]';

if wgtflag ==0
# metis_PartGraph(int prout, int[nv1] xadj, int[ne2] adj,
#                         output int[nv] part, output int[1] edgecut,
#                         int nparts, int wgtflag, int[5] options,
#                         int nv, int ne);
elseif wgtflag==1
# metis_PartGraph(int prout, int[nv1] xadj, int[ne2] adj,
#                         output int[nv] part, output int[1] edgecut,
#                         int nparts, int wgtflag, int[5] options,
#                         int nv, int ne,
#                         int[nadjwgt] adjwgt, int nadjwgt);
elseif wgtflag==2
# metis_PartGraph(int prout, int[nv1] xadj, int[ne2] adj,
#                         output int[nv] part, output int[1] edgecut,
#                         int nparts, int wgtflag, int[5] options,
#                         int nv, int ne, int ncon,
#                         int[nvwgt] vwgt, int nvwgt);
elseif wgtflag==3
# metis_PartGraph(int prout, int[nv1] xadj, int[ne2] adj,
#                         output int[nv] part, output int[1] edgecut,
#                         int nparts, int wgtflag, int[5] options,
#                         int nv, int ne, int ncon,
#                         int[nvwgt] vwgt, int nvwgt, int[nadjwgt] adjwgt, int nadjwgt);
end
