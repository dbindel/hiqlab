
$#include "Epetra_Vector.h"
$#include "Epetra_CrsMatrix.h"

$#include "qtrilinos_epetra.h"
$#include "trilinos_arpack.h"

// ---- Bindings for Arpack

int compute_eigs_arpack(Epetra_RowMatrix* Kshift, Epetra_RowMatrix* M,
                        int nev, int ncv,  double dr[nev+1]=0, double di[nev+1]=0,
                        Epetra_MultiVector* vri);
int compute_eigs_arpack(Epetra_RowMatrix* Kshift, Epetra_RowMatrix* M,
                        int nev, int ncv,  double d[nev]=0,
                        Epetra_MultiVector* vr);
int compute_eigs_arpack(Epetra_CrsMatrix_Complex* Kshift,
                        Epetra_CrsMatrix_Complex* M,
                        int nev, int ncv,  double dr[nev]=0,
                        double di[nev]=0,
                        Epetra_MultiVector_Complex* vz);


int compute_eigs_arpack(Mesh* mesh, double w0,
                        int nev, int ncv,  double dr[nev]=0,
                        double di[nev]=0,
                        Epetra_MultiVector* vri);

int compute_eigs_arpack(Mesh* mesh, double w0,
                        int nev, int ncv,  double dr[nev]=0,
                        double di[nev]=0,
                        Epetra_MultiVector_Complex* vz);

$[
local compute_eigs_arpack1 = compute_eigs_arpack
function compute_eigs_arpack(mesh, w0, nev, ncv, dr, di, vz)

  -- Allow pass-by-name
  if not w0 and type(mesh) == 'table' then
    local p = mesh
    mesh = p.mesh
    w0   = 0 or p.w0
    nev  = 5 or p.nev
    ncv  = p.ncv
    dr   = p.dr
    di   = p.di
    vz   = p.vz
  end

  -- Default ncv value
  if not ncv then
    if nev < 10 then ncv = 20 else ncv = 2*nev end
  end

  -- Initialize tables
  if not dr then
    dr = {}
    di = {}
    for i=1,nev do
      dr[i] = 0
      di[i] = 0
    end
  end

  if not vz then
      numid = mesh:get_numid()
      vz    = Epetra_MultiVector_Complex:create(numid,nev)
  end

  local status = compute_eigs_arpack1(mesh, w0, nev, ncv, dr, di, vz)
  return status, dr, di, vz

end
$]
